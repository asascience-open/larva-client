<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:esri="http://www.esri.com/2008/ags" 
		   backgroundColor="0xC6DBEF" width="100%" height="100%"
		   creationComplete="init()">
	<!--   minWidth="955" minHeight="600" -->
	<fx:Script>
		<![CDATA[
			import com.classes.*;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.geometry.WebMercatorMapPoint;
			import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.utils.JSONUtil;
			import com.skins.ToolTipSkin;
			import com.skins.configPopupContainer;
			import com.skins.helpPopupContainer;
			import com.skins.regularButtons;
			
			import mx.controls.Alert;
			import mx.events.ToolTipEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			[Bindable]
			private var modelList:Object = new Object;
			[Bindable]
			public var modelrunsURL:String = new String;
			[Bindable]
			public var forcingDomain:GraphicsLayer = new GraphicsLayer;
			[Bindable]
			public var backgroundMapU:String = new String;
			private var spatRefWM:SpatialReference = new SpatialReference(102100);
			private var mapExtent:Extent = new Extent(-11294052,-4175045,5221238,6822104,spatRefWM);
			
			private function init():void
			{
				var backgroundMap:ArcGISTiledMapServiceLayer = new ArcGISTiledMapServiceLayer(backgroundMapU);
				map.addLayer(backgroundMap);
				AppEvent.addListener(AppEvent.EXIT_APP, exitApp);
				map.extent = mapExtent;
				refresh();
				AppEvent.addListener(AppEvent.SET_APP_STATUS, enterAgain);
			}
			
			private function enterAgain(event:AppEvent):void{
				if(event.data.step == "status"){
					refresh();
				}
			}
			
			private function refresh():void
			{
				var modelList2:Object = new Object;	
				modelList2 = {};
				runs.dataProvider = null;
				AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_ON,"");
				var modelsservrequest:HTTPService = new HTTPService();
				modelsservrequest.addEventListener(ResultEvent.RESULT, modelsservice);
				modelsservrequest.url = modelrunsURL;
				var uniqueObj:Object = new Object;
				uniqueObj['x'] = new Date().time;
				modelsservrequest.resultFormat = "object";
				modelsservrequest.addEventListener(FaultEvent.FAULT, loadError);
				modelsservrequest.send(uniqueObj);	
				
				function modelsservice(event:ResultEvent): void
				{
					var jsResult:Object = JSONUtil.decode(event.result.toString());
					
					modelList2 = behavior.convertTimeObject(jsResult.results);
					AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
					runs.dataProvider = modelList2;
					runs.dataProvider.refresh();
				}
				function loadError(event:FaultEvent): void{
					Alert.show("Error fetching Current Models");
					AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
				}
			}
			
			private function exitApp(event:AppEvent):void
			{
				runs.dataProvider = null;
			}
			public function downloadUrl(data:Object,url:String,idN:String = "none"):void
			{
				if(url == 'config'&&idN != "none"){
					//Call and parse out Model Run Config file to popup window
					AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_ON,"");
					var configservrequest:HTTPService = new HTTPService();
					configservrequest.addEventListener(ResultEvent.RESULT, modelConfigService);
					
					var configURLCall:String = modelrunsURL.replace(".json","/"+idN+"/run_config")
					idN = "none";
					configservrequest.url = configURLCall;
					configservrequest.resultFormat = "object";
					configservrequest.send();	
					
					function modelConfigService(event:ResultEvent): void
					{
						var jsResult:Object = JSONUtil.decode(event.result.toString());
						var configObject:Object = behavior.convertTimeObjectConfig(jsResult);
						
						popUpConfig(configObject);
						AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
					}
				}
				else{
					for(var l:int=0; l <data.length; l++)
					{
						if(url == 'shp'&&data[l].Shapefile){
							navigateToURL(new URLRequest(data[l].Shapefile),'_blank');
						}
						if(url == 'netcdf'&&data[l].NetCDF){
							navigateToURL(new URLRequest(data[l].NetCDF),'_blank');
						}
						if(url == 'log'&&data[l].Logfile){
							navigateToURL(new URLRequest(data[l].Logfile),'_blank');
						}
					}
				}			
			}
			
			private function popUpConfig(ob:Object):void
			{
				var conf:configPopupContainer = new configPopupContainer();
				conf.hydroT = ob.hydro_path;
				conf.partT = ob.particles;
				conf.timestpT = ob.timestep;
				conf.geomT = ob.geometry;
				conf.releaseT = ob.release_depth;
				conf.methodT = ob.time_method;
				conf.verticT = ob.horiz_dispersion;
				conf.horizT = ob.vert_dispersion;
				conf.ownT = ob.email;
				conf.sDateT = ob.start;
				conf.behT = ob.behavior;
				conf.durT = ob.duration;
				
				conf.open(this, false);
				conf.width = stage.width;
				conf.height = stage.height;
				
				PopUpManager.centerPopUp(conf);
			}
			
			public function viewTrack(track:String):void
			{
				map.removeLayer(map.getLayer("bound"));
				
				if(track != null)
				{
					//Use for only one Line
					var ra:Array = new Array();
					var firstParse:Array = 	track.split("LINESTRING (");
					var secParse:Array = String(firstParse[1]).split(")");
					var thirdParse:Array = String(secParse[0]).split(",");
					
					for(var l:int=0; l <thirdParse.length; l++)
					{
						var fourthParse:Array = String(thirdParse[l]).split(" ");
						//condition for a space " " in the array
						if(l >0){
							ra.push(new WebMercatorMapPoint(fourthParse[1],fourthParse[2]));
							if(l == thirdParse.length-1){
								var endGraphicMarker:Graphic = new Graphic(new WebMercatorMapPoint(fourthParse[1],fourthParse[2]),
								new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_SQUARE, 15, 0xEB0909));
								endGraphicMarker.toolTip = "End Point";
								//myGraphicsLayer.add(endGraphicMarker);
							}
						}
						else{
							ra.push(new WebMercatorMapPoint(fourthParse[0],fourthParse[1]));
							var startGraphicMarker:Graphic = new Graphic(new WebMercatorMapPoint(fourthParse[0],fourthParse[1]),
								new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_DIAMOND, 18, 0x0EC41A));
								startGraphicMarker.toolTip = "Start Point";
							//myGraphicsLayer.add(startGraphicMarker);
						}
					} 
					var geoLine:Polyline = new Polyline;
					
					geoLine.addPath(ra);
					var graGraphic:Graphic = new Graphic(geoLine, lineSymbol);
					graGraphic.toolTip = "Trackline";
					var graphLayer:GraphicsLayer = new GraphicsLayer;
					map.extent = geoLine.extent;
					graphLayer.id = "bound";
					graphLayer.add(startGraphicMarker);
					graphLayer.add(endGraphicMarker);
					graphLayer.add(graGraphic);
					map.addLayer(graphLayer);
					map.zoomOut();
				}
				else{
				}
			}
			private function createCustomTip(title:String, event:ToolTipEvent):void {
				//No Eye Fucking eyedea why the fucking thing won't work
				var ptt:ToolTipSkin = new ToolTipSkin();
				ptt.text = title;
				event.toolTip = ptt;
			}
			
			// JL added
			private function back():void
			{
				var object:Object = new Object();
				object["step"] = "modelRun";
				object["id"] = forcingDomain;
				AppEvent.dispatch(AppEvent.SET_APP_STATUS,object);
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				//this is the size of the full popup's container background
				var instructions:helpPopupContainer = new helpPopupContainer();
				instructions.open(this, true);
				instructions.width = stage.width;
				instructions.height = stage.height;
				
				PopUpManager.centerPopUp(instructions);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<esri:SimpleLineSymbol id="lineSymbol"
							   width="3"
							   color="#6E6E6E" style="solid"/>
	</fx:Declarations>
	<s:Button styleName="btn-help" buttonMode="true" click="button1_clickHandler(event)" right="40" top="20"/>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingTop="5"  paddingRight="25" paddingLeft="25">
		
		<s:Label text="Your Particle Models" styleName="pageTitles" />
		
		<!-- remove this if you want to stack vertically -->
		<mx:HRule width="100%"/>
		
		<!-- centers content, then set left to 0 to contrain it left -->
		<s:HGroup width="100%" horizontalAlign="center" >
			<s:VGroup height="100%" width="50%" horizontalAlign="left" gap="0">
				
				<s:Label text="Model List" styleName="msg-action" paddingBottom="5"/>
				
				<mx:DataGrid id="runs" dataProvider="{modelList}" width="100%" rowCount="10" styleName="dataGridText" verticalAlign="middle">
					<mx:columns>
						<mx:DataGridColumn headerText="Created" dataField="created"  width="110" />
						<mx:DataGridColumn headerText="User" 	dataField="email" />
						<mx:DataGridColumn headerText="Progress/Status" dataField="status" itemRenderer="com.windows.statusRenderer" textAlign="center" fontWeight="bold" width="105" />
						<mx:DataGridColumn headerText="Trackline" width="56" textAlign="center" >
							<mx:itemRenderer>
								<fx:Component>
									<mx:LinkButton label="" disabledIcon="@Embed(source='../../assets/images/na.png')"
												   enabled="{data.status.toUpperCase() =='SUCCESS'}" toolTip="{(data.status.toUpperCase() =='SUCCESS') ? 'View Model Trajectory on Map': 'Trajectory not Available'}"
											   click="outerDocument.viewTrack(data.trackline)" useHandCursor="true" buttonMode="true"
											   icon="@Embed(source='../../assets/images/trackline.png')" />
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="NetCDF" width="46" textAlign="center">
							<mx:itemRenderer>
								<fx:Component>
									<mx:LinkButton label="" click="outerDocument.downloadUrl(data.output,'netcdf')" 
												   disabledIcon="@Embed(source='../../assets/images/na.png')" toolTip="{(data.status.toUpperCase() =='SUCCESS') ? 'Download NetCDF': 'NetCDF not Available'}"
												   enabled="{data.status.toUpperCase() =='SUCCESS'}" useHandCursor="true" buttonMode="true"
											   	   icon="@Embed(source='../../assets/images/downloadFile.png')" >
									<!--<fx:Script>
										<![CDATA[
											override public function set data(value:Object):void{
												if(data.status =='SUCCESS')
												{
													this.visible = true;
												}
												else{
													this.visible = false;
												}
											}
										
										
										]]>
									</fx:Script>-->
										</mx:LinkButton>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="SHP" width="46" textAlign="center" >
							<mx:itemRenderer>
								<fx:Component>
									<mx:LinkButton label="" click="outerDocument.downloadUrl(data.output,'shp')" 
												   disabledIcon="@Embed(source='../../assets/images/na.png')" toolTip="{(data.status.toUpperCase() =='SUCCESS') ? 'Download Shapefile': 'Shapefile not Available'}"
												   enabled="{data.status.toUpperCase() =='SUCCESS'}"  useHandCursor="true" buttonMode="true"
											   icon="@Embed(source='../../assets/images/downloadFile.png')"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="Log" width="46" textAlign="center" >
							<mx:itemRenderer>
								<fx:Component>
									<mx:LinkButton label="" click="outerDocument.downloadUrl(data.output,'log')" enabled="{data.status.toUpperCase() =='SUCCESS' || data.status.toUpperCase() =='FAILURE'}"
												   visible="true" useHandCursor="true" buttonMode="true" toolTip="Download Latest Log File" disabledIcon="@Embed(source='../../assets/images/na.png')"
												   icon="@Embed(source='../../assets/images/log.png')"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="Parameters" width="63" textAlign="center" >
							<mx:itemRenderer>
								<fx:Component>
									<mx:LinkButton label="" click="outerDocument.downloadUrl(data.output,'config',data._id)" 
												   visible="true" useHandCursor="true" buttonMode="true" toolTip="View Model Parameter Config File"
												   icon="@Embed(source='../../assets/images/options.png')"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<!--<mx:DataGridColumn headerText="Delete" width="40" textAlign="center">
							<mx:itemRenderer>
								<fx:Component>
									<mx:LinkButton label="" enabled="false" visible="false" 
											   icon="@Embed(source='../../assets/images/trash.png')" />
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>-->
					</mx:columns>
				</mx:DataGrid>
				<s:HGroup verticalAlign="middle" paddingTop="4">
					<s:Button label="Refresh List" toolTipCreate="createCustomTip('', event)"  toolTip="Refresh Status List" click="refresh()" skinClass="com.skins.regularButtons"/>
				</s:HGroup>
				
			</s:VGroup>			
			
			<s:VGroup height="100%" width="50%" paddingTop="10" right="0">
				<esri:Map id="map" width="100%" height="100%" 
						  wrapAround180="true" scaleBarVisible="false" logoVisible="false" level="2" zoomSliderVisible="true" />
			</s:VGroup>
		</s:HGroup>	
				
		<s:HGroup verticalAlign="middle" horizontalAlign="right" width="100%" height="40" paddingTop="10" paddingRight="120">
			<s:Button id="goBack" label="&lt; PREVIOUS" height="40" width="140" toolTipCreate="createCustomTip('', event)" toolTip="Go Back" click="back()"/>
		</s:HGroup>

		
	</s:VGroup>
	
	
	
<!-- ORIGINAL	
	<mx:VBox width="100%" height="100%" paddingTop="13" horizontalAlign="center">
		<s:Label text="Your Particle Models" fontSize="20" paddingBottom="5" paddingTop="5" fontWeight="bold"/>
		<mx:HRule width="100%"/>
			<mx:HBox verticalAlign="middle" horizontalAlign="center" width="85%" paddingTop="3" paddingBottom="3">
				<mx:Label fontWeight="bold" paddingLeft="0" text="Model List" fontSize="16" toolTip="Model Status" />
			</mx:HBox>
		<mx:HRule width="100%"/>
		<mx:VDividedBox horizontalAlign="center" width="90%">
			<mx:DataGrid dataProvider="{modelList}" id="runs" selectionColor="0xCCCCCC" width="100%" rowCount="6">
				<mx:columns>
					<mx:DataGridColumn dataField="_id" headerText="Model ID" minWidth="130"/>
					<!/-<mx:DataGridColumn dataField="name" width="80"/>/->
					<mx:DataGridColumn dataField="created" minWidth="130"/>
					<mx:DataGridColumn dataField="status" textAlign="center" fontWeight="bold" itemRenderer="com.windows.statusRenderer" headerText="Progress/Status"/>
					<mx:DataGridColumn>
						<mx:itemRenderer>
							<fx:Component>
								<mx:Button fontWeight="bold" enabled="{data.status =='SUCCESS'}" click="outerDocument.viewTrack(data.trackline)" label="View" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn>
						<mx:itemRenderer>
							<fx:Component>
								<mx:Button fontWeight="bold" click="outerDocument.downloadUrl(data.output,'netcdf')" enabled="{data.status =='SUCCESS'}" label="Download NetCDF" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn>
						<mx:itemRenderer>
							<fx:Component>
								<mx:Button fontWeight="bold" click="outerDocument.downloadUrl(data.output,'shp')" enabled="{data.status =='SUCCESS'}" label="Download SHP" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn>
						<mx:itemRenderer>
							<fx:Component>
								<mx:Button width="80" fontWeight="bold" label="Delete" enabled="false" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
			<esri:Map visible="true" id="map" wrapAround180="true" width="100%" scaleBarVisible="false" logoVisible="false" level="2" zoomSliderVisible="true" height="210" />
		</mx:VDividedBox>
		<s:Button fontWeight="bold" fontSize="14" label="Refresh List" id="goButt" toolTip="Refresh Status List" click="refresh()"/>
	</mx:VBox>
	-->
</mx:Canvas>