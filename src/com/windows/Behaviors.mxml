<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"  
		   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:cl="com.classes.*" xmlns:esri="http://www.esri.com/2008/ags" 
		   backgroundColor="0xC6DBEF" width="100%" height="100%"
		   creationComplete="init()">
<!--   minWidth="955" minHeight="600" -->
<!--	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace cl "com.classes.*";
		@namespace esri "http://www.esri.com/2008/ags";
		
		.myToolTip {
			backgroundAlpha: .8;
			cornerRadius: 5;
			fontSize:14;
			color:white;
			backgroundColor:black;
			borderStyle:none;
		}
	</fx:Style>-->

<fx:Script>
	<![CDATA[
		import com.classes.*;
		import com.esri.ags.Graphic;
		import com.esri.ags.SpatialReference;
		import com.esri.ags.geometry.Extent;
		import com.esri.ags.geometry.Geometry;
		import com.esri.ags.geometry.MapPoint;
		import com.esri.ags.geometry.Polygon;
		import com.esri.ags.geometry.Polyline;
		import com.esri.ags.geometry.WebMercatorMapPoint;
		import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
		import com.esri.ags.layers.GraphicsLayer;
		import com.esri.ags.utils.GeometryUtil;
		import com.esri.ags.utils.JSONUtil;
		import com.esri.ags.utils.WebMercatorUtil;
		import com.skins.ToolTipSkin;
		import com.skins.helpPopupContainer;
		import com.skins.largeButtons;
		import com.skins.regularButtons;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.events.ListEvent;
		import mx.events.ToolTipEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.AsyncResponder;
		import mx.rpc.AsyncToken;
		import mx.rpc.Fault;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.http.HTTPService;

		[Bindable]
		public var behaviorsList:Object = new Object;
		
		[Bindable]
		public var emailStr:String = "";
		[Bindable]
		public var urlSearchStr:String = "";
		[Bindable]
		public var emailUrlStr:String = "";
		[Bindable]
		public var backgroundMapU:String = "";
		[Bindable]
		public var behSelectedID:String = "";
		
		private var spatRef:SpatialReference = new SpatialReference(4326);
		private var spatRefWM:SpatialReference = new SpatialReference(102100);
		private var loadedFileData:Object;		
		private var mapExtent:Extent = new Extent();
		//private var mapExtent:Extent = new Extent(-11294052,-4175045,5221238,6822104,spatRefWM);
		
		private function init():void
		{
			var backgroundMap:ArcGISTiledMapServiceLayer = new ArcGISTiledMapServiceLayer(backgroundMapU);
			map.addLayer(backgroundMap);
			AppEvent.addListener(AppEvent.EXIT_APP, exitApp);
			map.extent = mapExtent;
		}
		private function exitApp(event:AppEvent):void
		{
			behaviorsList = null;
			listSearchText.text = "";
			mapReset();
			noLoc.visible = false;
		}
		private function refreshValues():void
		{
			AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_ON,"");
			mapReset();
			noLoc.visible = false;
			
			var emailservrequest:HTTPService = new HTTPService();
			emailservrequest.addEventListener(ResultEvent.RESULT, emailservice);
			var uniqueObj:Object = new Object;
			uniqueObj['x'] = new Date().time;
			emailservrequest.url = emailUrlStr;
			emailservrequest.resultFormat = "object";
			emailservrequest.addEventListener(FaultEvent.FAULT, loadError);
			emailservrequest.send(uniqueObj);	
			function emailservice(event:ResultEvent): void
			{
				var jsResult:Object = JSONUtil.decode(event.result.toString());
				behaviorsList = behavior.convertTimeObject(jsResult.results);
				AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
			}
		}
		
		private function search():void
		{
			AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_ON,"");
			mapReset();
			var emailservrequest:HTTPService = new HTTPService();
			emailservrequest.addEventListener(ResultEvent.RESULT, searchservice);
			
			var ownedText:String = "";
			//check to see whether to return private or public
			if(owned.selected == false){
				ownedText = "&owned=true";
			}
			emailservrequest.url = urlSearchStr+"search.json?terms="+listSearchText.text+"&email="+emailStr+ownedText;
			emailservrequest.resultFormat = "object";
			emailservrequest.addEventListener(FaultEvent.FAULT, loadError);
			emailservrequest.send();	
			function searchservice(event:ResultEvent): void
			{
				var jsResult:Object = JSONUtil.decode(event.result.toString());
				behaviorsList = behavior.convertTimeObject(jsResult.results);
				AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
			}
		}
		
		private function loadError(event:FaultEvent): void
		{
			Alert.show("Service Error");
			AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
		}
		
		//external call to main page to run model
		private function nextTab():void{
			if(bDG.selectedIndex >-1)
			{
				var object:Object = new Object();
				if(editFirst.selected == true){
					object["step"] = "edit";
				}
				else{
					object["step"] = "currents";
				}
				if(bDG.selectedItem._id == null){
					object["id"] =behSelectedID;
				}
				else{
					object["id"] = bDG.selectedItem._id;
				}
				AppEvent.dispatch(AppEvent.SET_APP_STATUS,object);
			}
			else{
				Alert.show("Please select a behavior","Alert");
			}
		}
		
		private function mapReset():void{
			map.removeLayer(map.getLayer("bound"));
			map.extent = mapExtent;
			
			behSelectedID = "";
			loadedFileName.text = "";
		}
			
		//upload part
		private function onUpload():void
		{
			mapReset();
			var loadFile:FileReference= new FileReference();
			loadFile.addEventListener(Event.SELECT,selectHandler)
			loadFile.addEventListener(Event.COMPLETE,loadCompleteHandler);
			loadFile.addEventListener(IOErrorEvent.IO_ERROR,loadIoErrorHandler);
			loadFile.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,postCompleteHandler);
			var upload:Boolean = false;
			
			var fileFilterArray:Array=new Array();
			//JSON documents
			var fileFilter:FileFilter= new FileFilter("JSON File","*.json");
			fileFilterArray.push(fileFilter);
			
			loadFile.browse(fileFilterArray);
			function selectHandler(event:Event):void
			{
				//Max file size ~1 gig
				if(loadFile.size>1000016){
					Alert.show('You have uploaded a file that is Huge!','error');
				}
				else{
					loadFile.load();
					AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_ON,"");
				}
			}
			function loadCompleteHandler(event:Event):void
			{			
				if(upload == false)
				{
					//This is to stop two events from occuring; 
					upload = true;
					loadedFileData = JSONUtil.decode(loadFile.data.toString());
					//check to see if the file is empty
					if(loadedFileData.results[0] != null)
					{						
						var newArrayList:ArrayCollection = new ArrayCollection;	
						newArrayList.addItem(loadedFileData.results[0]);
						bDG.dataProvider = newArrayList;
						bDG.selectedIndex = 0;
						
						var url:URLRequest = new URLRequest;
						url.method = "POST";
						url.url =urlSearchStr + "import.json?email="+emailStr;
						
						loadFile.upload(url,"jsonfile"); 
						
						zoomLocationExtent(loadedFileData.results[0]);
						loadedFileName.text= "Your File:  "+ loadFile.name;
					}
					else{
						Alert.show("Invalid File format", "File Error");
						AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
					}	
				}	
			}
			function postCompleteHandler(event:DataEvent):void
			{
				var obj:Array = event.data.split(" \"");
				var obj2:Array = String(obj[2]).split("\"\n");
				behSelectedID = obj2[0];//String(obj2[0]).split("\"")[1];
				//Alert.show(behSelectedID);
				AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
			}
			function loadIoErrorHandler(event:Event):void
			{
				Alert.show(event.toString());
				AppEvent.dispatch(AppEvent.SET_APP_PROGRESS_OFF,"");
			}
		}
		
		//zoom to location
		private function zoomLocationExtent(object:Object):void
		{
			mapReset();
			if(object.geometry != "null")
			{
				var geoString:String = object.geometry;
				//double check
				if(geoString != null)
				{
					//Use for only one (non-multiPoly) polygon
					//Because the OpenScales object model was fucked up
					var ra:Array = new Array();
					//behavior polygon
					var geoPoly:Polygon = new Polygon;
					
					//seperate for two if cross dateline
					if(geoString.search("),(")>-1){
						//remove last ))
						geoString = geoString.slice( 0, -2 );
						//POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))
						var firstParse:Array = 	geoString.split("POLYGON((");
						var secParse:Array = String(firstParse[1]).split("),(");
						
						for(var q:int=0; q <thirdParse.length; q++)
						{
							var thirdParse:Array = String(secParse[q]).split(",");
							for(var l:int=0; l <thirdParse.length; l++)
							{
								var fourthParse:Array = String(thirdParse[l]).split(" ");
								//condition for a space " " in the array
								if(l >0){
									ra.push(new WebMercatorMapPoint(fourthParse[1],fourthParse[2]));
								}
								else{
									ra.push(new WebMercatorMapPoint(fourthParse[0],fourthParse[1]));
								}
							}
							geoPoly.addRing(ra);
						}	
					}
					else{
						var firstParse:Array = 	geoString.split("((");
						var secParse:Array = String(firstParse[1]).split("))");
						var thirdParse:Array = String(secParse[0]).split(",");
						
						for(var l:int=0; l <thirdParse.length; l++)
						{
							var fourthParse:Array = String(thirdParse[l]).split(" ");
							//condition for a space " " in the array
							if(l >0){
								ra.push(new WebMercatorMapPoint(fourthParse[1],fourthParse[2]));
							}
							else{
								ra.push(new WebMercatorMapPoint(fourthParse[0],fourthParse[1]));
							}
						}
						geoPoly.addRing(ra);
					}
					
					var graGraphic:Graphic = new Graphic(geoPoly, polygonSymbol);
					map.extent = geoPoly.extent;
					var graphLayer:GraphicsLayer = new GraphicsLayer;
					
					graphLayer.id = "bound";
					graphLayer.add(graGraphic);
					map.addLayer(graphLayer); 
					map.zoomOut();
					noLoc.visible = false;
					
					/* this didn't work for handling dateline
					//GeometryUtil.normalizeCentralMeridian([geoPoly],esriGeometryService,new AsyncResponder(normalizePoly,faultHandler));
					//var newGeom:Polygon = WebMercatorUtil.geographicToWebMercator(geoPoly) as Polygon;
					function normalizePoly(item:Object, token:Object = null):void
					{
						var geoPoly2:Polyline = new Polyline;
						geoPoly2.addPath(item[0].paths[0]);
						var graGraphic:Graphic = new Graphic(geoPoly2, lineSymbol);
						map.extent = geoPoly.extent;
						var graphLayer:GraphicsLayer = new GraphicsLayer;
						
						graphLayer.id = "bound";
						graphLayer.add(graGraphic);
						map.addLayer(graphLayer); 
						map.zoomOut();
						noLoc.visible = false;
					}
					function faultHandler(fault:Fault, asyncToken:AsyncToken):void
					{
					} */
				}
				else{
					//Alert.show("There is no Behavior Location set","Alert");
					noLoc.visible = true;
				}
			}
		}
		private function dgClickHandler(event:ListEvent):void
//		private function dgClickHandler(event:GridEvent):void
		{
			map.removeLayer(map.getLayer("bound"));
			//goButt.setStyle("fontWeight","bold");
			//goButt.setStyle("fontSize",13);
			zoomLocationExtent(event.itemRenderer.data);
			behSelectedID = event.itemRenderer.data._id;
			this.parentApplication.beh = event.itemRenderer.data._id;
		}
		
		private function createCustomTip(title:String, event:ToolTipEvent):void {
			//No Eye Fucking eyedea why the fucking thing won't work
			var ptt:ToolTipSkin = new ToolTipSkin();
			ptt.text = title;
			event.toolTip = ptt;
		}

 		 /* THIS IS A RECAP OF ALL DATA AS A SINGLE POPUP, BUT ONLY WORKS WITH SPARK DataGrid
		private function buildToolTip(item:Object, column:GridColumn):String {
			var myString:String = "";
			if (item != null) {
				myString = "<bold>FULL DETAILS</bold>\n\n";
				myString += "Name: " + item.name + "\n";
				myString += "Genus: " + item.genus + "\n";
				myString += "Species: " + item.species + "\n";
				myString += "Common Name: " + item.common_name + "\n";
				myString += "Created: " + item.created + "\n";
				myString += "Notes: " + item.notes + "\n";
				myString += "Status: " + item.status + "\n";
				myString += "User: " + item.user + "\n";
			}
			return myString;
		} */  
		
		/* private function createToolTip(event:ListEvent):void {
			var str:String =  DataGridItemRenderer(event.itemRenderer).data.label;
			bDG.toolTip = str;
		}
		
		private function deleteToolTip(obj:Object):void {
			bDG.toolTip = null;
		} */
		
		protected function button1_clickHandler(event:MouseEvent):void
		{
			//this is the size of the full popup's container background
			var instructions:helpPopupContainer = new helpPopupContainer();
			instructions.open(this, true);
			instructions.width = stage.width;
			instructions.height = this.height;
			
			PopUpManager.centerPopUp(instructions);
		}
	]]>
</fx:Script>
	<fx:Declarations>
		<esri:SimpleLineSymbol id="lineSymbol" color="0xFFCA00" width="2" alpha=".8" style="solid"/>
		<esri:SimpleFillSymbol id="polygonSymbol" color="0x999999" alpha=".4" style="solid" outline="{lineSymbol}"/>
		<esri:GeometryService id="esriGeometryService" 
							  url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer"/>
	</fx:Declarations>
	<s:Button styleName="btn-help" buttonMode="true" click="button1_clickHandler(event)" right="40" top="20"/>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingTop="5"  paddingRight="25" paddingLeft="25" >
		
		<s:Label text="Available Behaviors" styleName="pageTitles"/>
						
		<!-- remove this if you want to stack vertically -->
		<mx:HRule width="100%"/>
		
		<!-- centers content, then set left to 0 to contrain it left -->
		<s:HGroup width="100%" horizontalAlign="center" >
			<s:VGroup height="100%" width="50%" horizontalAlign="left">
				
				<s:Label text="Choose One Behavior" styleName="msg-action"/>
				
				<!-- neg padding is a hack / some reason this form element isn't aligning left -->
				<s:HGroup verticalAlign="middle" paddingLeft="-110">
					<mx:Label id="noLoc" text="No Location Set" visible="false" fontSize="13" fontWeight="bold" color="red" />
					<s:Label text="Search Behaviors:" />
					<s:TextInput id="listSearchText" width="150" prompt="Enter a keyword"/>
					<s:Button label="Search" toolTip="Search using keyword" toolTipCreate="createCustomTip('', event)" click="search()" skinClass="com.skins.regularButtons"/>
					<mx:CheckBox id="owned" label="Search Public Behaviors" selected="true" toolTipCreate="createCustomTip('', event)" toolTip="Uncheck to only search your private Behaviors" />
				</s:HGroup>
				
				<!--<mx:DataGrid id="bDG" itemClick="{dgClickHandler(event)}" dataProvider="{behaviorsList}" 
							 width="100%" rowCount="18" styleName="dataGridText" 
							 itemRollOut="deleteToolTip(event)"
							 itemRollOver="createToolTip(event)"
							 variableRowHeight="true">-->
					
				<mx:DataGrid id="bDG" itemClick="{dgClickHandler(event)}" dataProvider="{behaviorsList}" 
							 width="100%" rowCount="11" styleName="dataGridText">
					<mx:columns>
						<mx:DataGridColumn headerText="Name"		dataField="name"  />
						<mx:DataGridColumn headerText="Genus" 		dataField="genus" />
						<mx:DataGridColumn headerText="Species" 	dataField="species" />
						<mx:DataGridColumn headerText="Common Name"	dataField="common_name"  width="80"/>
						<mx:DataGridColumn headerText="Created" 	dataField="created" />
						<mx:DataGridColumn headerText="Notes" 		dataField="notes" />
						<mx:DataGridColumn headerText="Status" 		dataField="status" />
						<mx:DataGridColumn headerText="User" 		dataField="user"  />
					</mx:columns>
				</mx:DataGrid>
				
				<!--<s:DataGrid id="bDG" gridClick="{dgClickHandler(event)}" dataProvider="{behaviorsList}" 
							width="100%" height="300" styleName="dataGridText" dataTipFunction="buildToolTip" > 
					<s:columns>
						<s:ArrayCollection>							
						<s:GridColumn headerText="Name"			dataField="name"  showDataTips="true"/>
						<s:GridColumn headerText="Genus" 		dataField="genus" showDataTips="true" />
						<s:GridColumn headerText="Species" 		dataField="species" showDataTips="true" />
						<s:GridColumn headerText="Common Name"	dataField="common_name" showDataTips="true" />
						<s:GridColumn headerText="Created" 		dataField="created" showDataTips="true" />
						<s:GridColumn headerText="Notes" 		dataField="notes" showDataTips="true" />
						<s:GridColumn headerText="Status" 		dataField="status" showDataTips="true" />
						<s:GridColumn headerText="User" 		dataField="user" showDataTips="true"/>
						</s:ArrayCollection>
					</s:columns>
				</s:DataGrid> -->
				
				
				<s:HGroup verticalAlign="middle" paddingTop="4">
					<s:Label id="loadedFileName" fontWeight="bold" fontSize="13" toolTipCreate="createCustomTip('', event)" toolTip="Your File" click="onUpload()"/>
					<s:Button label="Upload New Behavior File" toolTipCreate="createCustomTip('', event)" toolTip="Upload Behavior File" click="onUpload()" skinClass="com.skins.regularButtons"/>
					<s:Button label="Create New Behavior" toolTipCreate="createCustomTip('', event)" toolTip="Navigate to Behavior Page" click="navigateToURL(new URLRequest('http://larva-library.herokuapp.com/'), 'AGOL')" skinClass="com.skins.regularButtons"/>
					<s:Button label="Refresh List" toolTipCreate="createCustomTip('', event)" toolTip="Refresh values if Behaviors have been changed" click="refreshValues()" skinClass="com.skins.regularButtons"/>
					<s:CheckBox label="Edit Behavior" id="editFirst" toolTipCreate="createCustomTip('', event)" selected="false" toolTip="Check to Edit configuration, then click NEXT STEP to make changes" />
				</s:HGroup>
				
			</s:VGroup>			
			
			<s:VGroup height="100%" width="50%" paddingTop="0" right="0">
				<s:Label text="General Distribution Region" styleName="msg-action"/>
				<esri:Map id="map" width="100%" height="100%" 
						  wrapAround180="true" scaleBarVisible="false" logoVisible="false" level="2" zoomSliderVisible="true" />
			</s:VGroup>
		</s:HGroup>	
		
		
		<s:HGroup verticalAlign="middle" horizontalAlign="right" width="100%" height="40" paddingTop="10" paddingRight="120">
			<s:Button id="goButt" label="NEXT STEP &gt;" height="40" width="140" toolTipCreate="createCustomTip('', event)" 
					  toolTip="Go to Run Model Page" click="nextTab()" skinClass="com.skins.largeButtons"/>
		</s:HGroup>
		
	</s:VGroup>
  	
	
	<!-- ORIGINAL
	<mx:VBox width="100%" height="100%" paddingTop="13" horizontalAlign="center">
		<s:Label text="Available Behaviors" fontSize="20" paddingBottom="5" paddingTop="5" fontWeight="bold"/>
		<mx:HRule width="100%"/>
		<mx:HBox verticalAlign="middle" horizontalAlign="left" width="85%" paddingTop="3" paddingBottom="3">
			<mx:HBox verticalAlign="middle" cornerRadius="5" backgroundColor="0x4A4A4A">
				<mx:Label fontWeight="bold" paddingLeft="3" paddingRight="3" fontSize="16" color="0xEFF3FF" text="Choose One Behavior" toolTipCreate="createCustomTip('', event)" toolTip="Choose One Behavior" />
			</mx:HBox>
			<mx:Label fontSize="13" fontWeight="bold" color="red" id="noLoc" paddingLeft="230"  text="No Location Set" visible="false" />
			<mx:Label fontSize="13" text="Search Behaviors:" toolTip="Search Behaviors:" />
			<mx:TextInput id="listSearchText" width="150"/>
			<s:Button label="Search" toolTip="Search using keyword" toolTipCreate="createCustomTip('', event)" click="search()"/>
			<mx:CheckBox id="owned" label="Search Public Behaviors" selected="true" toolTipCreate="createCustomTip('', event)" toolTip="Uncheck to only search your private Behaviors" />
		</mx:HBox>
		<mx:HRule width="100%"/>
		<mx:DataGrid selectionColor="0xCCCCCC" id="bDG" itemClick="{dgClickHandler(event)}" dataProvider="{behaviorsList}" width="50%" rowCount="4">
			<mx:columns>
				<mx:DataGridColumn dataField="name"/>
				<mx:DataGridColumn dataField="genus"/>
				<mx:DataGridColumn dataField="species"/>
				<mx:DataGridColumn dataField="common_name" headerText="common name"/>
				<mx:DataGridColumn dataField="created"/>
				<mx:DataGridColumn dataField="notes"/>
				<mx:DataGridColumn headerText="owner" dataField="status"/>
				<mx:DataGridColumn dataField="user"/>
				<!/-<mx:DataGridColumn dataField="geometry"/>/->
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox verticalAlign="middle" paddingTop="4">
			<s:Label id="loadedFileName" fontWeight="bold" fontSize="13" toolTipCreate="createCustomTip('', event)" toolTip="Your File" click="onUpload()"/>
			<s:Button label="Upload New Behavior File" toolTipCreate="createCustomTip('', event)" toolTip="Upload Behavior File" click="onUpload()"/>
			<s:Button label="Create New Behavior" toolTipCreate="createCustomTip('', event)" toolTip="Navigate to Behavior Page" click="navigateToURL(new URLRequest('http://larva-library.herokuapp.com/'), 'AGOL')"/>
			<s:Button label="Refresh List" toolTipCreate="createCustomTip('', event)" toolTip="Refresh values if Behaviors have been changed" click="refreshValues()"/>
			<s:Button label="Next" id="goButt" toolTipCreate="createCustomTip('', event)" toolTip="Go to Run Model Page" click="nextTab()"/>
			<s:CheckBox label="Edit Behavior" toolTipCreate="createCustomTip('', event)" id="editFirst" selected="false" toolTip="Check to Edit configuration" />
		</mx:HBox>
		<esri:Map id="map" wrapAround180="true" width="85%" scaleBarVisible="false" logoVisible="false" level="2" zoomSliderVisible="true" height="280" />
	</mx:VBox> -->
</mx:Canvas>